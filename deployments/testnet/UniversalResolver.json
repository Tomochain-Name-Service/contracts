{
  "address": "0x2aFeA99c621Bc5d029De4F0dfb2dc09634E683D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract TomoNs",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f85858783742f19d4288daf3115ece884d89938ee778b3c9582f6ebdf76f330",
  "receipt": {
    "to": null,
    "from": "0xC9B6314502A207642c241cFF8A0002a1eE07A1c7",
    "contractAddress": "0x2aFeA99c621Bc5d029De4F0dfb2dc09634E683D8",
    "transactionIndex": 1,
    "gasUsed": "1582204",
    "logsBloom": "0x
    "blockHash": "0x94165dc7b0543a81bd9cd6526ce5c7e1b0763ae28c873bfc3503d55003d78559",
    "transactionHash": "0x5f85858783742f19d4288daf3115ece884d89938ee778b3c9582f6ebdf76f330",
    "logs": [],
    "blockNumber": 43593099,
    "cumulativeGasUsed": "1582204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x669579145E221a9398B8d108ACbCC0608ADA90E5"
  ],
  "numDeployments": 1,
  "solcInputHash": "b63d9945e9d4fc281a733cf528efadab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract TomoNs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findResolver(bytes)\":{\"details\":\"Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.\",\"params\":{\"name\":\"The name to resolve, in TomoNs-encoded and normalised form.\"},\"returns\":{\"_0\":\"The Resolver responsible for this name, and the namehash of the full name.\"}},\"resolve(bytes,bytes)\":{\"details\":\"Performs TomoNs name resolution for the supplied name and resolution data.\",\"params\":{\"data\":\"The resolution data, as specified in ONSIP-10.\",\"name\":\"The name to resolve, in normalised and TomoNs-encoded form.\"},\"returns\":{\"_0\":\"The result of resolving the name.\"}},\"resolveCallback(bytes,bytes)\":{\"details\":\"Callback function for `resolve`.\",\"params\":{\"extraData\":\"Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.\",\"response\":\"Response data returned by the target address that invoked the inner `OffchainData` revert.\"}},\"reverse(bytes)\":{\"details\":\"Performs TomoNs name reverse resolution for the supplied reverse name.\",\"params\":{\"reverseName\":\"The reverse name to resolve, in normalised and TomoNs-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\"},\"returns\":{\"_0\":\"The resolved name, the resolved address, the reverse resolver address, and the resolver address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an TomoNs name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/TomoNs.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface TomoNs {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x16fb704aa8d888a51cb23e02ccb70cd8ac79e0db24fc255cfc3a241acea6e221\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(\\n        bytes32 node,\\n        uint256 coinType,\\n        bytes calldata a\\n    ) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(\\n        bytes32 node,\\n        bytes32 x,\\n        bytes32 y\\n    ) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(bytes32 nodehash, bytes[] calldata data)\\n        external\\n        returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x73b6cd44b0ed803083996abd3d2683f2444731b6486045f8274c44fce66bf939\",\"license\":\"MIT\"},\"contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./profiles/IVersionableResolver.sol\\\";\\n\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\n    mapping(bytes32 => uint64) public recordVersions;\\n\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    /**\\n     * Increments the record version associated with an TomoNs node.\\n     * May only be called by the owner of that node in the TomoNs registry.\\n     * @param node The node to update.\\n     */\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\n        recordVersions[node]++;\\n        emit VersionChanged(node, recordVersions[node]);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x19acbf865036bc90f8e18d9c7062f83a64861194b8cdd5aeeb23104909ecf360\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an DNS node.\\n     * Defined in EIP205.\\n     * @param node The DNS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes)\\n        external\\n        view\\n        returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x55012708b8f6309b34e85bab7eb33bdfc000fb00e94db78374f2c87ff683c810\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an DNS node.\\n     * @param node The DNS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x8b86fccd00cd3b833cf12c8b65320e266025d12404c2a65d7a67ed24c983ccd2\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(bytes32 node, uint256 coinType)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37221203e063dee5aa2a067a6ab3401e9cca41cce5b15230994b6ea377f05ed5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an DNS node.\\n     * @param node The DNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x95e71bc3da622d887b37e865f36bb10ef4e8bd7a826f11897f939327e9730553\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The DNS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa08c9e636c7aeabe64ebc74461627c6ea33a1536fc4b0c8d20564f3df4ce5754\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(bytes memory name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory, address);\\n}\\n\",\"keccak256\":\"0x0a586a1725cdc5f90f2e302c620a4a033adfc87e49bbcc5a43604ba579bce7a7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The DNS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x67b5834e13449e0c80ce5a040d54518d0e809fe23e5706de7214a7841a14de4e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an DNS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The DNS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1b79ce9dd8712ec29c8605ec3d1734771ce3d4a33faf93f8bdf8a9834870db09\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an DNS node.\\n     * Defined in EIP 619.\\n     * @param node The DNS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x002d30ef9b0b36f9e214626f38e4f0f0c39d30fc8b9964ca9ae0db5ff80f1f4f\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an DNS node and key.\\n     * @param node The DNS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xcac6a70d0c681a0d6e3bf674ebd4cb5dd1b1f420ecd7f622109e11364460123a\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IVersionableResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IVersionableResolver {\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\n\\n    function recordVersions(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\",\"license\":\"MIT\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LowLevelCallUtils {\\n    using Address for address;\\n\\n    /**\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\n     *      `returnDataSize` and `readReturnData`.\\n     * @param target The address to staticcall.\\n     * @param data The data to pass to the call.\\n     * @return success True if the call succeeded, or false if it reverts.\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bool success)\\n    {\\n        require(\\n            target.isContract(),\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\n        );\\n        assembly {\\n            success := staticcall(\\n                gas(),\\n                target,\\n                add(data, 32),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the size of the return data of the most recent external call.\\n     */\\n    function returnDataSize() internal pure returns (uint256 len) {\\n        assembly {\\n            len := returndatasize()\\n        }\\n    }\\n\\n    /**\\n     * @dev Reads return data from the most recent external call.\\n     * @param offset Offset into the return data.\\n     * @param length Number of bytes to return.\\n     */\\n    function readReturnData(uint256 offset, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory data)\\n    {\\n        data = new bytes(length);\\n        assembly {\\n            returndatacopy(add(data, 32), offset, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with the return data from the most recent external call.\\n     */\\n    function propagateRevert() internal pure {\\n        assembly {\\n            returndatacopy(0, 0, returndatasize())\\n            revert(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x058281a2f5a93e64977227f880c477d28cadbd960fe835466db1d481be5c7344\",\"license\":\"MIT\"},\"contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(string memory name)\\n        internal\\n        pure\\n        returns (bytes memory dnsName, bytes32 node)\\n    {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x6d5f1ec4a5558a3b9a4f379dc153bf89669adacc968917eef5195091fb179511\",\"license\":\"MIT\"},\"contracts/utils/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.12 <0.9.0;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LowLevelCallUtils} from \\\"./LowLevelCallUtils.sol\\\";\\nimport {TomoNs} from \\\"../registry/TomoNs.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {Resolver, INameResolver, IAddrResolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {NameEncoder} from \\\"./NameEncoder.sol\\\";\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\n/**\\n * The Universal Resolver is a contract that handles the work of resolving a name entirely onchain,\\n * making it possible to make a single smart contract call to resolve an TomoNs name.\\n */\\ncontract UniversalResolver is IExtendedResolver, ERC165 {\\n    using Address for address;\\n    using NameEncoder for string;\\n    using BytesUtils for bytes;\\n\\n    TomoNs public immutable registry;\\n\\n    constructor(address _registry) {\\n        registry = TomoNs(_registry);\\n    }\\n\\n    /**\\n     * @dev Performs TomoNs name resolution for the supplied name and resolution data.\\n     * @param name The name to resolve, in normalised and TomoNs-encoded form.\\n     * @param data The resolution data, as specified in ONSIP-10.\\n     * @return The result of resolving the name.\\n     */\\n    function resolve(bytes calldata name, bytes memory data)\\n        external\\n        view\\n        override\\n        returns (bytes memory, address)\\n    {\\n        (Resolver resolver, ) = findResolver(name);\\n        if (address(resolver) == address(0)) {\\n            return (\\\"\\\", address(0));\\n        }\\n\\n        try\\n            resolver.supportsInterface(type(IExtendedResolver).interfaceId)\\n        returns (bool supported) {\\n            if (supported) {\\n                return (\\n                    callWithOffchainLookupPropagation(\\n                        address(resolver),\\n                        abi.encodeCall(IExtendedResolver.resolve, (name, data)),\\n                        UniversalResolver.resolveCallback.selector\\n                    ),\\n                    address(resolver)\\n                );\\n            }\\n        } catch {}\\n        return (\\n            callWithOffchainLookupPropagation(\\n                address(resolver),\\n                data,\\n                UniversalResolver.resolveCallback.selector\\n            ),\\n            address(resolver)\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs TomoNs name reverse resolution for the supplied reverse name.\\n     * @param reverseName The reverse name to resolve, in normalised and TomoNs-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\\n     * @return The resolved name, the resolved address, the reverse resolver address, and the resolver address.\\n     */\\n    function reverse(bytes calldata reverseName)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        (\\n            bytes memory resolvedReverseData,\\n            address reverseResolverAddress\\n        ) = this.resolve(\\n                reverseName,\\n                abi.encodeCall(INameResolver.name, reverseName.namehash(0))\\n            );\\n\\n        string memory resolvedName = abi.decode(resolvedReverseData, (string));\\n\\n        (bytes memory encodedName, bytes32 namehash) = resolvedName\\n            .dnsEncodeName();\\n\\n        (bytes memory resolvedData, address resolverAddress) = this.resolve(\\n            encodedName,\\n            abi.encodeCall(IAddrResolver.addr, namehash)\\n        );\\n\\n        address resolvedAddress = abi.decode(resolvedData, (address));\\n\\n        return (\\n            resolvedName,\\n            resolvedAddress,\\n            reverseResolverAddress,\\n            resolverAddress\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Makes a call to `target` with `data`. If the call reverts with an `OffchainLookup` error, wraps\\n     *      the error with the data necessary to continue the request where it left off.\\n     * @param target The address to call.\\n     * @param data The data to call `target` with.\\n     * @param callbackFunction The function ID of a function on this contract to use as an EIP 3668 callback.\\n     *        This function's `extraData` argument will be passed `(address target, bytes4 innerCallback, bytes innerExtraData)`.\\n     * @return ret If `target` did not revert, contains the return data from the call to `target`.\\n     */\\n    function callWithOffchainLookupPropagation(\\n        address target,\\n        bytes memory data,\\n        bytes4 callbackFunction\\n    ) internal view returns (bytes memory ret) {\\n        bool result = LowLevelCallUtils.functionStaticCall(target, data);\\n        uint256 size = LowLevelCallUtils.returnDataSize();\\n\\n        if (result) {\\n            return LowLevelCallUtils.readReturnData(0, size);\\n        }\\n\\n        // Failure\\n        if (size >= 4) {\\n            bytes memory errorId = LowLevelCallUtils.readReturnData(0, 4);\\n            if (bytes4(errorId) == OffchainLookup.selector) {\\n                // Offchain lookup. Decode the revert message and create our own that nests it.\\n                bytes memory revertData = LowLevelCallUtils.readReturnData(\\n                    4,\\n                    size - 4\\n                );\\n                (\\n                    address sender,\\n                    string[] memory urls,\\n                    bytes memory callData,\\n                    bytes4 innerCallbackFunction,\\n                    bytes memory extraData\\n                ) = abi.decode(\\n                        revertData,\\n                        (address, string[], bytes, bytes4, bytes)\\n                    );\\n                if (sender == target) {\\n                    revert OffchainLookup(\\n                        address(this),\\n                        urls,\\n                        callData,\\n                        callbackFunction,\\n                        abi.encode(sender, innerCallbackFunction, extraData)\\n                    );\\n                }\\n            }\\n        }\\n\\n        LowLevelCallUtils.propagateRevert();\\n    }\\n\\n    /**\\n     * @dev Callback function for `resolve`.\\n     * @param response Response data returned by the target address that invoked the inner `OffchainData` revert.\\n     * @param extraData Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.\\n     */\\n    function resolveCallback(bytes calldata response, bytes calldata extraData)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        (\\n            address target,\\n            bytes4 innerCallbackFunction,\\n            bytes memory innerExtraData\\n        ) = abi.decode(extraData, (address, bytes4, bytes));\\n        return\\n            abi.decode(\\n                target.functionStaticCall(\\n                    abi.encodeWithSelector(\\n                        innerCallbackFunction,\\n                        response,\\n                        innerExtraData\\n                    )\\n                ),\\n                (bytes)\\n            );\\n    }\\n\\n    /**\\n     * @dev Finds a resolver by recursively querying the registry, starting at the longest name and progressively\\n     *      removing labels until it finds a result.\\n     * @param name The name to resolve, in TomoNs-encoded and normalised form.\\n     * @return The Resolver responsible for this name, and the namehash of the full name.\\n     */\\n    function findResolver(bytes calldata name)\\n        public\\n        view\\n        returns (Resolver, bytes32)\\n    {\\n        (address resolver, bytes32 labelhash) = findResolver(name, 0);\\n        return (Resolver(resolver), labelhash);\\n    }\\n\\n    function findResolver(bytes calldata name, uint256 offset)\\n        internal\\n        view\\n        returns (address, bytes32)\\n    {\\n        uint256 labelLength = uint256(uint8(name[offset]));\\n        if (labelLength == 0) {\\n            return (address(0), bytes32(0));\\n        }\\n        uint256 nextLabel = offset + labelLength + 1;\\n        bytes32 labelHash = keccak256(name[offset + 1:nextLabel]);\\n        (address parentresolver, bytes32 parentnode) = findResolver(\\n            name,\\n            nextLabel\\n        );\\n        bytes32 node = keccak256(abi.encodePacked(parentnode, labelHash));\\n        address resolver = registry.resolver(node);\\n        if (resolver != address(0)) {\\n            return (resolver, node);\\n        }\\n        return (parentresolver, node);\\n    }\\n}\\n\",\"keccak256\":\"0xee85ea77bc60e7c16e52947a13f0a253fa14922b9fb564e20733c1a2674eb898\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.12;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the TomoNs namehash of a TomoNs-encoded name.\\n     * @param self The TomoNs-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(bytes memory self, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a TomoNs-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes32 labelhash, uint256 newIdx)\\n    {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x7bb0eec2aa6cff9ea8cdce4ae37e86c944a759703cf9370317f5cc86036573f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516116e93803806116e983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611658610091600039600081816094015261079c01526116586000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780637b1039991461008f5780639061b923146100ce578063a1cbcbaf146100ef578063b4a8580114610121578063ec11c82314610141575b600080fd5b61007a610075366004610dff565b610164565b60405190151581526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610086565b6100e16100dc366004610f23565b61019b565b604051610086929190610fe8565b6101026100fd366004611012565b6102c8565b604080516001600160a01b039093168352602083019190915201610086565b61013461012f366004611054565b6102e9565b60405161008691906110c0565b61015461014f366004611012565b61037d565b60405161008694939291906110d3565b60006001600160e01b03198216639061b92360e01b148061019557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000806101aa86866102c8565b5090506001600160a01b0381166101d5575050604080516020810190915260008082529091506102c0565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa92505050801561023c575060408051601f3d908101601f191682019092526102399181019061110f565b60015b610245576102a9565b80156102a75761029b8288888860405160240161026493929190611131565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b17905263b4a8580160e01b61058f565b829350935050506102c0565b505b6102bb818563b4a8580160e01b61058f565b925090505b935093915050565b6000806000806102da868660006106b3565b909450925050505b9250929050565b6060600080806102fb85870187611184565b92509250925061035c8289898460405160240161031a93929190611131565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b03851690610839565b80602001905181019061036f9190611221565b93505050505b949350505050565b60606000806000806000306001600160a01b0316639061b92389896103dc60008d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061085e9050565b6040516024016103ee91815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663691f343160e01b179052516001600160e01b031960e086901b16815261043993929190600401611131565b600060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047e9190810190611256565b915091506000828060200190518101906104989190611221565b90506000806104a68361091d565b91509150600080306001600160a01b0316639061b92385856040516024016104d091815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316631d9dabef60e11b179052516001600160e01b031960e085901b16815261051a9291906004016112a8565b600060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055f9190810190611256565b9150915060008280602001905181019061057991906112d6565b959e959d50959b50995092975050505050505050565b6060600061059d8585610b16565b90503d81156105ba576105b1600082610b99565b925050506106ac565b600481106106a15760006105d060006004610b99565b9050630556f18360e41b6105e3826112f3565b6001600160e01b031916141561069f57600061060960046106048186611340565b610b99565b90506000806000806000858060200190518101906106279190611367565b945094509450945094508c6001600160a01b0316856001600160a01b03161415610698573084848d8886866040516020016106649392919061149a565b60408051601f1981840301815290829052630556f18360e41b825261068f95949392916004016114ce565b60405180910390fd5b5050505050505b505b6106a9610bee565b50505b9392505050565b60008060008585858181106106ca576106ca611579565b919091013560f81c915050806106e75750600091508190506102c0565b60006106f3828661158f565b6106fe90600161158f565b90506000878761070f88600161158f565b61071b928592906115a7565b6040516107299291906115d1565b604051809103902090506000806107418a8a866106b3565b9150915060008184604051602001610763929190918252602082015260400190565b60408051601f19818403018152908290528051602090910120630178b8bf60e01b82526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080791906112d6565b90506001600160a01b0381161561082757975095506102c0945050505050565b50919a91995090975050505050505050565b60606106ac83836040518060600160405280602581526020016115fe60259139610bf8565b600080600061086d8585610c70565b9092509050816108df57600185516108859190611340565b84146108d35760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d65000000604482015260640161068f565b50600091506101959050565b6108e9858261085e565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b80516060906000908190849061093481600261158f565b67ffffffffffffffff81111561094c5761094c610e5e565b6040519080825280601f01601f191660200182016040528015610976576020820181803683370190505b50945060009350806109b957600060f81b8560008151811061099a5761099a611579565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b8281815181106109d1576109d1611579565b6020910101516001600160f81b031916601760f91b1415610a61578360f81b868260010181518110610a0557610a05611579565b60200101906001600160f81b031916908160001a90535084610a2e846001840160ff8816610d27565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350610ab1565b600184019350828181518110610a7957610a79611579565b602001015160f81c60f81b868260010181518110610a9957610a99611579565b60200101906001600160f81b031916908160001a9053505b80610abb57610ac4565b600019016109bf565b5083610ad583600060ff8716610d27565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061099a5761099a611579565b60006001600160a01b0383163b610b865760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201526d1bc81b9bdb8b58dbdb9d1c9858dd60921b606482015260840161068f565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115610bb457610bb4610e5e565b6040519080825280601f01601f191660200182016040528015610bde576020820181803683370190505b5090508183602083013e92915050565b3d6000803e3d6000fd5b6060600080856001600160a01b031685604051610c1591906115e1565b600060405180830381855afa9150503d8060008114610c50576040519150601f19603f3d011682016040523d82523d6000602084013e610c55565b606091505b5091509150610c6686838387610d4b565b9695505050505050565b60008083518310610cc35760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e64730000604482015260640161068f565b6000848481518110610cd757610cd7611579565b016020015160f81c90508015610d0357610cfc85610cf686600161158f565b83610d27565b9250610d08565b600092505b610d12818561158f565b610d1d90600161158f565b9150509250929050565b8251600090610d36838561158f565b1115610d4157600080fd5b5091016020012090565b60608315610db7578251610db0576001600160a01b0385163b610db05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068f565b5081610375565b6103758383815115610dcc5781518083602001fd5b8060405162461bcd60e51b815260040161068f91906110c0565b6001600160e01b031981168114610dfc57600080fd5b50565b600060208284031215610e1157600080fd5b81356106ac81610de6565b60008083601f840112610e2e57600080fd5b50813567ffffffffffffffff811115610e4657600080fd5b6020830191508360208285010111156102e257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e9d57610e9d610e5e565b604052919050565b600067ffffffffffffffff821115610ebf57610ebf610e5e565b50601f01601f191660200190565b600082601f830112610ede57600080fd5b8135610ef1610eec82610ea5565b610e74565b818152846020838601011115610f0657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060408486031215610f3857600080fd5b833567ffffffffffffffff80821115610f5057600080fd5b610f5c87838801610e1c565b90955093506020860135915080821115610f7557600080fd5b50610f8286828701610ecd565b9150509250925092565b60005b83811015610fa7578181015183820152602001610f8f565b83811115610fb6576000848401525b50505050565b60008151808452610fd4816020860160208601610f8c565b601f01601f19169290920160200192915050565b604081526000610ffb6040830185610fbc565b905060018060a01b03831660208301529392505050565b6000806020838503121561102557600080fd5b823567ffffffffffffffff81111561103c57600080fd5b61104885828601610e1c565b90969095509350505050565b6000806000806040858703121561106a57600080fd5b843567ffffffffffffffff8082111561108257600080fd5b61108e88838901610e1c565b909650945060208701359150808211156110a757600080fd5b506110b487828801610e1c565b95989497509550505050565b6020815260006106ac6020830184610fbc565b6080815260006110e66080830187610fbc565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b60006020828403121561112157600080fd5b815180151581146106ac57600080fd5b60408152826040820152828460608301376000606084830101526000601f19601f85011682016060838203016020840152610c666060820185610fbc565b6001600160a01b0381168114610dfc57600080fd5b60008060006060848603121561119957600080fd5b83356111a48161116f565b925060208401356111b481610de6565b9150604084013567ffffffffffffffff8111156111d057600080fd5b610f8286828701610ecd565b600082601f8301126111ed57600080fd5b81516111fb610eec82610ea5565b81815284602083860101111561121057600080fd5b610375826020830160208701610f8c565b60006020828403121561123357600080fd5b815167ffffffffffffffff81111561124a57600080fd5b610375848285016111dc565b6000806040838503121561126957600080fd5b825167ffffffffffffffff81111561128057600080fd5b61128c858286016111dc565b925050602083015161129d8161116f565b809150509250929050565b6040815260006112bb6040830185610fbc565b82810360208401526112cd8185610fbc565b95945050505050565b6000602082840312156112e857600080fd5b81516106ac8161116f565b805160208201516001600160e01b031980821692919060048310156113225780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156113525761135261132a565b500390565b805161136281610de6565b919050565b600080600080600060a0868803121561137f57600080fd5b855161138a8161116f565b8095505060208087015167ffffffffffffffff808211156113aa57600080fd5b818901915089601f8301126113be57600080fd5b8151818111156113d0576113d0610e5e565b8060051b6113df858201610e74565b918252838101850191858101908d8411156113f957600080fd5b86860192505b83831015611435578251858111156114175760008081fd5b6114258f89838a01016111dc565b83525091860191908601906113ff565b60408d0151909a5095505050508083111561144f57600080fd5b61145b8a848b016111dc565b955061146960608a01611357565b9450608089015192508083111561147f57600080fd5b505061148d888289016111dc565b9150509295509295909350565b6001600160a01b03841681526001600160e01b0319831660208201526060604082018190526000906112cd90830184610fbc565b600060a0820160018060a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156115325760bf19888703018452611520868351610fbc565b95509284019290840190600101611504565b505050505082810360408401526115498187610fbc565b6001600160e01b0319861660608501529050828103608084015261156d8185610fbc565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156115a2576115a261132a565b500190565b600080858511156115b757600080fd5b838611156115c457600080fd5b5050820193919092039150565b8183823760009101908152919050565b600082516115f3818460208701610f8c565b919091019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a26469706673582212202c92185438b1a6bb87c31b140f85c3da4ec43e60564c6b49505fc8d51f1966c564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780637b1039991461008f5780639061b923146100ce578063a1cbcbaf146100ef578063b4a8580114610121578063ec11c82314610141575b600080fd5b61007a610075366004610dff565b610164565b60405190151581526020015b60405180910390f35b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610086565b6100e16100dc366004610f23565b61019b565b604051610086929190610fe8565b6101026100fd366004611012565b6102c8565b604080516001600160a01b039093168352602083019190915201610086565b61013461012f366004611054565b6102e9565b60405161008691906110c0565b61015461014f366004611012565b61037d565b60405161008694939291906110d3565b60006001600160e01b03198216639061b92360e01b148061019557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000806101aa86866102c8565b5090506001600160a01b0381166101d5575050604080516020810190915260008082529091506102c0565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa92505050801561023c575060408051601f3d908101601f191682019092526102399181019061110f565b60015b610245576102a9565b80156102a75761029b8288888860405160240161026493929190611131565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b17905263b4a8580160e01b61058f565b829350935050506102c0565b505b6102bb818563b4a8580160e01b61058f565b925090505b935093915050565b6000806000806102da868660006106b3565b909450925050505b9250929050565b6060600080806102fb85870187611184565b92509250925061035c8289898460405160240161031a93929190611131565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526001600160a01b03851690610839565b80602001905181019061036f9190611221565b93505050505b949350505050565b60606000806000806000306001600160a01b0316639061b92389896103dc60008d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061085e9050565b6040516024016103ee91815260200190565b60408051601f198184030181529181526020820180516001600160e01b031663691f343160e01b179052516001600160e01b031960e086901b16815261043993929190600401611131565b600060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047e9190810190611256565b915091506000828060200190518101906104989190611221565b90506000806104a68361091d565b91509150600080306001600160a01b0316639061b92385856040516024016104d091815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316631d9dabef60e11b179052516001600160e01b031960e085901b16815261051a9291906004016112a8565b600060405180830381865afa158015610537573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055f9190810190611256565b9150915060008280602001905181019061057991906112d6565b959e959d50959b50995092975050505050505050565b6060600061059d8585610b16565b90503d81156105ba576105b1600082610b99565b925050506106ac565b600481106106a15760006105d060006004610b99565b9050630556f18360e41b6105e3826112f3565b6001600160e01b031916141561069f57600061060960046106048186611340565b610b99565b90506000806000806000858060200190518101906106279190611367565b945094509450945094508c6001600160a01b0316856001600160a01b03161415610698573084848d8886866040516020016106649392919061149a565b60408051601f1981840301815290829052630556f18360e41b825261068f95949392916004016114ce565b60405180910390fd5b5050505050505b505b6106a9610bee565b50505b9392505050565b60008060008585858181106106ca576106ca611579565b919091013560f81c915050806106e75750600091508190506102c0565b60006106f3828661158f565b6106fe90600161158f565b90506000878761070f88600161158f565b61071b928592906115a7565b6040516107299291906115d1565b604051809103902090506000806107418a8a866106b3565b9150915060008184604051602001610763929190918252602082015260400190565b60408051601f19818403018152908290528051602090910120630178b8bf60e01b82526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080791906112d6565b90506001600160a01b0381161561082757975095506102c0945050505050565b50919a91995090975050505050505050565b60606106ac83836040518060600160405280602581526020016115fe60259139610bf8565b600080600061086d8585610c70565b9092509050816108df57600185516108859190611340565b84146108d35760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d65000000604482015260640161068f565b50600091506101959050565b6108e9858261085e565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b80516060906000908190849061093481600261158f565b67ffffffffffffffff81111561094c5761094c610e5e565b6040519080825280601f01601f191660200182016040528015610976576020820181803683370190505b50945060009350806109b957600060f81b8560008151811061099a5761099a611579565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b8281815181106109d1576109d1611579565b6020910101516001600160f81b031916601760f91b1415610a61578360f81b868260010181518110610a0557610a05611579565b60200101906001600160f81b031916908160001a90535084610a2e846001840160ff8816610d27565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350610ab1565b600184019350828181518110610a7957610a79611579565b602001015160f81c60f81b868260010181518110610a9957610a99611579565b60200101906001600160f81b031916908160001a9053505b80610abb57610ac4565b600019016109bf565b5083610ad583600060ff8716610d27565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b8560008151811061099a5761099a611579565b60006001600160a01b0383163b610b865760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201526d1bc81b9bdb8b58dbdb9d1c9858dd60921b606482015260840161068f565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115610bb457610bb4610e5e565b6040519080825280601f01601f191660200182016040528015610bde576020820181803683370190505b5090508183602083013e92915050565b3d6000803e3d6000fd5b6060600080856001600160a01b031685604051610c1591906115e1565b600060405180830381855afa9150503d8060008114610c50576040519150601f19603f3d011682016040523d82523d6000602084013e610c55565b606091505b5091509150610c6686838387610d4b565b9695505050505050565b60008083518310610cc35760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e64730000604482015260640161068f565b6000848481518110610cd757610cd7611579565b016020015160f81c90508015610d0357610cfc85610cf686600161158f565b83610d27565b9250610d08565b600092505b610d12818561158f565b610d1d90600161158f565b9150509250929050565b8251600090610d36838561158f565b1115610d4157600080fd5b5091016020012090565b60608315610db7578251610db0576001600160a01b0385163b610db05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068f565b5081610375565b6103758383815115610dcc5781518083602001fd5b8060405162461bcd60e51b815260040161068f91906110c0565b6001600160e01b031981168114610dfc57600080fd5b50565b600060208284031215610e1157600080fd5b81356106ac81610de6565b60008083601f840112610e2e57600080fd5b50813567ffffffffffffffff811115610e4657600080fd5b6020830191508360208285010111156102e257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e9d57610e9d610e5e565b604052919050565b600067ffffffffffffffff821115610ebf57610ebf610e5e565b50601f01601f191660200190565b600082601f830112610ede57600080fd5b8135610ef1610eec82610ea5565b610e74565b818152846020838601011115610f0657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060408486031215610f3857600080fd5b833567ffffffffffffffff80821115610f5057600080fd5b610f5c87838801610e1c565b90955093506020860135915080821115610f7557600080fd5b50610f8286828701610ecd565b9150509250925092565b60005b83811015610fa7578181015183820152602001610f8f565b83811115610fb6576000848401525b50505050565b60008151808452610fd4816020860160208601610f8c565b601f01601f19169290920160200192915050565b604081526000610ffb6040830185610fbc565b905060018060a01b03831660208301529392505050565b6000806020838503121561102557600080fd5b823567ffffffffffffffff81111561103c57600080fd5b61104885828601610e1c565b90969095509350505050565b6000806000806040858703121561106a57600080fd5b843567ffffffffffffffff8082111561108257600080fd5b61108e88838901610e1c565b909650945060208701359150808211156110a757600080fd5b506110b487828801610e1c565b95989497509550505050565b6020815260006106ac6020830184610fbc565b6080815260006110e66080830187610fbc565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b60006020828403121561112157600080fd5b815180151581146106ac57600080fd5b60408152826040820152828460608301376000606084830101526000601f19601f85011682016060838203016020840152610c666060820185610fbc565b6001600160a01b0381168114610dfc57600080fd5b60008060006060848603121561119957600080fd5b83356111a48161116f565b925060208401356111b481610de6565b9150604084013567ffffffffffffffff8111156111d057600080fd5b610f8286828701610ecd565b600082601f8301126111ed57600080fd5b81516111fb610eec82610ea5565b81815284602083860101111561121057600080fd5b610375826020830160208701610f8c565b60006020828403121561123357600080fd5b815167ffffffffffffffff81111561124a57600080fd5b610375848285016111dc565b6000806040838503121561126957600080fd5b825167ffffffffffffffff81111561128057600080fd5b61128c858286016111dc565b925050602083015161129d8161116f565b809150509250929050565b6040815260006112bb6040830185610fbc565b82810360208401526112cd8185610fbc565b95945050505050565b6000602082840312156112e857600080fd5b81516106ac8161116f565b805160208201516001600160e01b031980821692919060048310156113225780818460040360031b1b83161693505b505050919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156113525761135261132a565b500390565b805161136281610de6565b919050565b600080600080600060a0868803121561137f57600080fd5b855161138a8161116f565b8095505060208087015167ffffffffffffffff808211156113aa57600080fd5b818901915089601f8301126113be57600080fd5b8151818111156113d0576113d0610e5e565b8060051b6113df858201610e74565b918252838101850191858101908d8411156113f957600080fd5b86860192505b83831015611435578251858111156114175760008081fd5b6114258f89838a01016111dc565b83525091860191908601906113ff565b60408d0151909a5095505050508083111561144f57600080fd5b61145b8a848b016111dc565b955061146960608a01611357565b9450608089015192508083111561147f57600080fd5b505061148d888289016111dc565b9150509295509295909350565b6001600160a01b03841681526001600160e01b0319831660208201526060604082018190526000906112cd90830184610fbc565b600060a0820160018060a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156115325760bf19888703018452611520868351610fbc565b95509284019290840190600101611504565b505050505082810360408401526115498187610fbc565b6001600160e01b0319861660608501529050828103608084015261156d8185610fbc565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156115a2576115a261132a565b500190565b600080858511156115b757600080fd5b838611156115c457600080fd5b5050820193919092039150565b8183823760009101908152919050565b600082516115f3818460208701610f8c565b919091019291505056fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a26469706673582212202c92185438b1a6bb87c31b140f85c3da4ec43e60564c6b49505fc8d51f1966c564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findResolver(bytes)": {
        "details": "Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.",
        "params": {
          "name": "The name to resolve, in TomoNs-encoded and normalised form."
        },
        "returns": {
          "_0": "The Resolver responsible for this name, and the namehash of the full name."
        }
      },
      "resolve(bytes,bytes)": {
        "details": "Performs TomoNs name resolution for the supplied name and resolution data.",
        "params": {
          "data": "The resolution data, as specified in ONSIP-10.",
          "name": "The name to resolve, in normalised and TomoNs-encoded form."
        },
        "returns": {
          "_0": "The result of resolving the name."
        }
      },
      "resolveCallback(bytes,bytes)": {
        "details": "Callback function for `resolve`.",
        "params": {
          "extraData": "Extra data encoded by `callWithOffchainLookupPropagation` to allow completing the request.",
          "response": "Response data returned by the target address that invoked the inner `OffchainData` revert."
        }
      },
      "reverse(bytes)": {
        "details": "Performs TomoNs name reverse resolution for the supplied reverse name.",
        "params": {
          "reverseName": "The reverse name to resolve, in normalised and TomoNs-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse"
        },
        "returns": {
          "_0": "The resolved name, the resolved address, the reverse resolver address, and the resolver address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an TomoNs name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}